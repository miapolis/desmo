import script "./maze.mjs"

"Created with Desmoscript, a language that compiles down to Desmos expressions: https://github.com/radian628/desmoscript"
"You can look through the expressions but most aren't particularly legible—view the full source code at https://github.com/miapolis/desmo"

settings @{
    viewport: @{ xmin: -18, ymin: -20, xmax: 19, ymax: 40 },
    showGrid: false,
    showXAxis: false,
    showYAxis: false,
    userLockedViewport: true
  }

gridSize = 10;
proj = 3.5;
gridOffset = 0.75;

cosProj = cos(proj / 6);
sinProj = sin(proj / 6);

subst!(sum, a, b, a + b);
subst!(diff, a, b, a - b);
subst!(bool, v, { v: 1, 0 });
subst!(not, a, 1 - a);

subst!(
anim,
    expr,
    frames,
    duration,
    { global.frame > frames: { global.frame < sum!(frames, duration): expr } }
  );

fn mix(a, b, factor) {
  show clampedFactor = min(max(factor, 0), 1) @{ hidden: true }
  b * clampedFactor + a * (1 - clampedFactor)
}

"https://easings.net/#easeOutCubic"
show fn easeInOutCubic(t) {
  { t < 0.5: 4 * t * t * t, 1 - (-2 * t + 2) ^ 3 / 2 }
} @{ hidden: true }

"https://en.wikipedia.org/wiki/Smoothstep"
fn smoothstepMix(a, b, factor) {
  mix(a, b, factor * factor * (3 - factor * 2))
}

fn easeInOutMix(a, b, factor) {
  mix(a, b, easeInOutCubic(factor))
}

"Desmos supports tickers, enabling game loops"
ticker @{ handlerLatex: ds(gameLoopLatex!()), playing: true, open: true }

"https://gameprogrammingpatterns.com/game-loop.html"
"This is very verbose for a game loop, but more or less still adheres to common patterns found in modern game engines like https://docs.unity3d.com/Manual/ExecutionOrder.html"
fn gameLoop(delta) {
  {
    state.hasWon == 1: {
      state.levelEndFrame > 0: { 
          global.frame > (state.levelEndFrame + 70): (player.reset(), camera.reset(), state.hasWon -> 0, state.level -> min(state.level + 1, 5), walls.nextLevel(), state.levelEndFrame -> 0, state.levelStartFrame -> global.frame),
          screen.doFade() 
      },
    },
    (player.movePlayer(), camera.adjustCameraToPlayer(), renderer.target.rotate(), state.checkWin(), { state.levelStartFrame > 0: { global.frame < (state.levelStartFrame + 50): screen.fadeIn() }}),
  }
    , { global.frame < 130: controller.playAnim() }
    , { global.frame < 50: camera.animateIn() }
    ,  global.tick(delta)
}

ns global {
  "The frame counter and delta time are used to drive the game loop and all animations. Delta time is the time in milliseconds since the last frame. Desmos surprisingly has this feature as the variable 'dt' in a ticker"
  frame = 0;
  "As more polygons and parametrics are drawn in the scene, the time taken to render a frame will increase as it is more computationally intense"
  "By multiplying animations, player speed, camera movement, etc. by delta time, the scene will run at the same speed regardless of the frame rate, even if it appears choppier"
  deltaTime = 0;
  
  "https://en.wikipedia.org/wiki/Linear_interpolation"
  "can't be used for non-player animations however—causes extreme jitter"
  fn lerp(a, b, time) {
    (1 - time * deltaTime / 16) * a + time * deltaTime / 16 * b
  }
  show fn delta(start, duration) {
    mod((frame - start), duration) / duration
  } @{ hidden: true }
  "Runs at the end of every frame, updates the frame counter and delta time"
  fn tick(elapsed) {
    frame -> frame + 1 , deltaTime -> elapsed
  }
}

ns camera {
  cameraX = 0;
  cameraY = 2;
  
  targetX = 0;
  targetY = 0;
  
  lastAnimStart = 0;
  
  subst!(abs, a, { a > 0: a, -1 * a });
  subst!(movingX, bool!(abs!(diff!(targetX, cameraX)) > 0.2));
  
  fn startCamera() {
    lastAnimStart -> { movingX!() > 0: lastAnimStart, global.frame }
  }
  "Lerp the camera to the player's position, with a slight delay to make it feel more natural"
  fn adjustCameraToPlayer() {
    targetX -> -1 * player.x
      , cameraX -> global.lerp(cameraX, targetX, global.delta(lastAnimStart, 4000))
  }
  fn reset() {
    cameraX -> 0 , cameraY -> 4
  }

  fn animateIn() {
    cameraY -> anim!(easeInOutMix(2, 4, global.delta(20, 30)), 20, 30),
    screen.screenOpacity -> anim!(smoothstepMix(1, 0, global.delta(20, 30)), 20, 30)
  }
}

ns player {
  row = 0;
  col = 0;
  
  x = col;
  y = gridSize - row;
  
  targetRow = row;
  targetCol = col;
  
  targetX = 0;
  targetY = gridSize;
  
  lastAnimStart = 0;
  
  fn movePlayer() {
    targetX -> targetCol
      , targetY -> gridSize - targetRow - 0.5
      , x -> global.lerp(x, targetX, global.delta(lastAnimStart, 60))
      , y -> global.lerp(y, targetY, global.delta(lastAnimStart, 60))
      , row -> round(global.lerp(row, targetRow, global.delta(lastAnimStart, 30)))
      , col -> round(global.lerp(col, targetCol, global.delta(lastAnimStart, 30)))
  }
  
  fn reset() {
    row -> 0 , col -> 0 , targetRow -> 0 , targetCol -> 0 , x -> 0 , y -> gridSize
  }
}

ns controls {
  subst!(anim, player.lastAnimStart -> global.frame);
  
  fn getCellIndex(row, col) {
    row * gridSize + col + 1
  }
  
  "Collider data is loaded as four bits per cell, in the order [left, bottom, right, top] so [1, 1, 1, 0] would be a cell with walls everywhere except the top"
  show fn getCellWalls(idx) {
    [
      walls.binary[(idx * 4 - 3)],
      walls.binary[(idx * 4 - 2)],
      walls.binary[(idx * 4 - 1)],
      walls.binary[(idx * 4)]
    ]
  } @{ hidden: true }
  
  "Collision 'detection' in this case is actually really simple, just checking the walls of the current cell of the player"

  fn checkUp() {
    { player.row > 0: getCellWalls(getCellIndex(player.row, player.col))[4], 1 }
  }
  fn checkDown() {
    {
      player.row < diff!(gridSize, 1): getCellWalls(getCellIndex(player.row, player.col))[2],
      1
    }
  }
  fn checkLeft() {
    { player.col > 0: getCellWalls(getCellIndex(player.row, player.col))[1], 1 }
  }
  fn checkRight() {
    {
      player.col < diff!(gridSize, 1): getCellWalls(getCellIndex(player.row, player.col))[3],
      1
    }
  }

  fn canMove() {
    {diff!(global.frame, player.lastAnimStart) > 3: 1, 0}
  }
}

"Parametric line macro for isometric space, uses the projection constants to convert from isometric to screen space https://en.wikipedia.org/wiki/Isometric_video_game_graphics"
"t is restricted to the range [0, 1] since using sin and cos amplitude to restrict leads to garbage performance"

subst!(param, x1, y1, x2, y2, (
      cosProj * ((1 - t) * x1 + t * x2)
      - cosProj * ((1 - t) * y1 + t * y2)
      + camera.cameraX,
      sinProj * ((1 - t) * x1 + t * x2)
      + sinProj * ((1 - t) * y1 + t * y2)
      + camera.cameraY
      - 1
));

"Isometric utility macros"
subst!(iso, xVar, yVar, yOffset, (
      cosProj * xVar - cosProj * yVar,
      sinProj * xVar + sinProj * yVar - 1 - yOffset
));
subst!(xy, xVar, yVar, (
      cosProj * xVar - cosProj * yVar + camera.cameraX,
      sinProj * xVar + sinProj * yVar + camera.cameraY - 1
));
subst!(shiftXy, xVar, yVar, offsetY, (
      cosProj * xVar - cosProj * yVar + camera.cameraX,
      sinProj * xVar + sinProj * yVar + camera.cameraY - 1 - offsetY
));

"Walls are drawn as polygons, parametrics too imperformant for this many lines"
subst!(wall, x1, y1, x2, y2, polygon(
xy!(x1, y1),
      xy!(x2, y2),
      shiftXy!(x2, y2, gridOffset),
      shiftXy!(x1, y1, gridOffset)
    ));

"All collision, polygon, and parametric data for mazes is generated with a script—not written in Desmos: https://github.com/miapolis/desmo/blob/main/maze.mts"
"These macros compile to static lists that otherwise would probably be too difficult to generate in Desmos alone"
"⚠️ Big expressions, causes lag when opened"
ns walls {
  bin1 = maze!(0);
  poly1 = polygonData!(0);
  line1 = parametricData!(0);

  bin2 = maze!(1);
  poly2 = polygonData!(1);
  line2 = parametricData!(1);

  bin3 = maze!(2);
  poly3 = polygonData!(2);
  line3 = parametricData!(2);

  bin4 = maze!(3);
  poly4 = polygonData!(3);
  line4 = parametricData!(3);

  bin5 = maze!(4);
  poly5 = polygonData!(4);
  line5 = parametricData!(4);
  
  binary = bin1;
  polyData = poly1;
  lineData = line1;

  fn nextLevel() {
    binary -> { state.level == 1: bin2, state.level == 2: bin3, state.level == 3: bin4, bin5 },
    polyData -> { state.level == 1: poly2, state.level == 2: poly3, state.level == 3: poly4, poly5 },
    lineData -> { state.level == 1: line2, state.level == 2: line3, state.level == 3: line4, line5 },
    gridSize -> min(gridSize + 1, 14)
  }
}

"Isometric + parametric renderer"
"Walls and other 'filled' objects are drawn as polygons, lines are drawn as parametric equations"
"See https://arc.net/e/D0D2FA07-26EC-43F7-ABC7-D12B06758A7A"
ns renderer {
  ns background {
    "Background polygon"
    show bg = polygon((-100, -100), (-100, 100), (100, 100), (100, -100)) @{ colorLatex: ds(rgb(3, 7, 18)), fillOpacity: ds(1) }
  }
  
  ns maze {
    "Floor polygon"
    show floor = polygon(
shiftXy!(0, 0, gridOffset),
        shiftXy!(gridSize, 0, gridOffset),
        shiftXy!(gridSize, gridSize, gridOffset),
        shiftXy!(0, gridSize, gridOffset)
      ) @{ colorLatex: ds(rgb(17, 24, 39)), fillOpacity: ds(1) }
  }
  
  ns obstacles {
    subst!(
polygonRow,
        rowIndex,
        startCol,
        wall!(startCol, gridSize - rowIndex, startCol + 1, gridSize - rowIndex)
      );
    
    subst!(
polygonCol,
        colIndex,
        startRow,
        wall!(colIndex, gridSize - startRow, colIndex, gridSize - startRow - 1)
      );
    
    subst!(
parametricRow,
        rowIndex,
        startCol,
        length,
        param!(startCol, gridSize - rowIndex, startCol + length, gridSize - rowIndex)
      );
    
    subst!(
parametricCol,
        colIndex,
        startRow,
        length,
        param!(colIndex, gridSize - startRow, colIndex, gridSize - startRow - length)
      );
    
    "All walls are drawn as polygons, stored in two separate lists based on player depth"
    wallTypes = [walls.polyData[(i * 3 - 2)] for i=[1..length!(walls.polyData) / 3]];
    colorR = [{ i == 0: 31, 55 } for i=wallTypes];
    colorG = [{ i == 0: 41, 65 } for i=wallTypes];
    colorB = [{ i == 0: 55, 81 } for i=wallTypes];
    "A color latex expression is used to color the walls based on their type (horizontal or vertical)"
    colorLatex = rgb(colorR, colorG, colorB);
    
    show backRow = wall!(0, gridSize, gridSize, gridSize) @{ color: "rgb( 31, 41, 55 )", fillOpacity: "1" }
    show backCol = wall!(gridSize, 0, gridSize, gridSize) @{ color: "rgb( 55, 65, 81 )", fillOpacity: "1" }
    
    subst!(type, i, walls.polyData[(i * 3 - 2)]);
    subst!(index, i, walls.polyData[(i * 3 - 1)]);
    subst!(start, i, walls.polyData[(i * 3)]);
    
    subst!(
debouncedRow,
        { player.targetRow > player.row: player.targetRow, player.row }
      );
    subst!(
debouncedCol,
        { player.targetCol < player.col: player.targetCol, player.col }
      );
    
    "Returns walls to be rendered before the player, filtering based on depth"
    "There's actually a lot of nuance to this, like using some debounced values of the player's position to prevent frames where polygons are sorted incorrectly, due to the player transitioning between two cells"
    fn getRearPolygon(i) {
      {
        type!(i) == 0: {
          (bool!(index!(i) <= debouncedRow!()) * bool!(start!(i) >= debouncedCol!())) == 1: polygonRow!(index!(i), start!(i))
        },
        (bool!(index!(i) > debouncedCol!()) * bool!(start!(i) <= debouncedRow!())) == 1: polygonCol!(index!(i), start!(i))
      }
    }
    "Rendering front polygons is just the negation of the rear polygons"
    fn getFrontPolygon(i) {
      {
        type!(i) == 0: {
          (bool!(index!(i) <= debouncedRow!()) * bool!(start!(i) >= debouncedCol!())) == 0: polygonRow!(index!(i), start!(i))
        },
        (bool!(index!(i) > debouncedCol!()) * bool!(start!(i) <= debouncedRow!())) == 0: polygonCol!(index!(i), start!(i))
      }
    }
    
    show rearPolygons = [getRearPolygon(i) for i=[1..length!(walls.polyData) / 3]] @{ fillOpacity: "1", colorLatex: ds(colorLatex), lines: false }
    
    ns character {
      "Macro to generate a circle, taking into account camera position and offset"
      subst!(circle, offset, size, (
            cosProj * (cos(t) * cos(t) * size + player.x + (1 - size) / 2)
            - cosProj * (cos(t) * sin(t) * size + player.y)
            + camera.cameraX,
            sinProj * (cos(t) * cos(t) * size + player.x)
            + sinProj * (cos(t) * sin(t) * size + player.y)
            + camera.cameraY
            - 1
            - offset
));
      
      show circle3 = circle!(gridOffset - 0.1, 0.4) @{
        parametricDomain: @{ min: ds(0), max: ds(tau!()) },
        color: "rgb(245, 158, 11)",
        lineWidth: "5",
        lineOpacity: "0.5"
      }
      show circle2 = circle!((gridOffset - 0.1) / 2, 0.6) @{
        parametricDomain: @{ min: ds(0), max: ds(tau!()) },
        color: "rgb(249, 115, 22)",
        lineWidth: "5",
        lineOpacity: "0.75"
      }
      show circle1 = circle!(0, 0.8) @{
        parametricDomain: @{ min: ds(0), max: ds(tau!()) },
        color: "rgb(239, 68, 68)",
        lineWidth: "5",
        lineOpacity: "1"
      }
    }
   
    "Render the front polygons"
    show frontPolygons = [getFrontPolygon(i) for i=[1..length!(walls.polyData) / 3]] @{ fillOpacity: "1", colorLatex: ds(colorLatex), lines: false }
    
    show parametrics = [{
        walls.lineData[(i * 4 - 3)] == 0: parametricRow!(
walls.lineData[(i * 4 - 2)],
            walls.lineData[(i * 4 - 1)],
            walls.lineData[(i * 4)]
          ),
        parametricCol!(
walls.lineData[(i * 4 - 2)],
            walls.lineData[(i * 4 - 1)],
            walls.lineData[(i * 4)]
          )
      } for i=[1..length!(walls.lineData) / 4]] @{ color: "rgb(209, 213, 219)", fillOpacity: "1", lineWidth: "5" }
  }
  
  show frontRow = wall!(0, 0, gridSize, 0) @{ color: "rgb( 31, 41, 55 )", fillOpacity: "1" }
  show frontCol = wall!(0, 0, 0, gridSize) @{ color: "rgb( 55, 65, 81 )", fillOpacity: "1" }
  
  ns frame {
    idx = [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0];
    subst!(p, i, n, idx[(i * 4 - n)] * gridSize);
    
    show [param!(p!(i, 3), p!(i, 2), p!(i, 1), p!(i, 0)) for i=[1..16]] @{ color: "rgb(209,213,219)", fillOpacity: "1", lineWidth: "5" }
  }

  ns target {
    rot = 0;
    offset = 0;

    subst!(rose, size, baseOffset, (
          cosProj * (size * cos(1.5 * t + rot) * cos(t) + gridSize - 0.5)
          - cosProj * (size * cos(1.5 * t + rot) * sin(t) + 0.5)
          + camera.cameraX,
          sinProj * (size * cos(1.5 * t + rot) * cos(t) + gridSize - 0.5)
          + sinProj * (size * cos(1.5 * t + rot) * sin(t) + 0.5)
          + camera.cameraY - 1 + baseOffset + offset
    ));

    fn rotate() {
      rot -> rot + 0.0025 * global.deltaTime,
      offset -> 0.5 + 0.5 * sin(rot / 2)
    }

    show rose0 = rose!(0.1, 0) @{
      parametricDomain: @{ min: ds(0), max: ds(2 * tau!()) },
      color: "rgb(6, 182, 212)",
      lineWidth: "4",
      lineOpacity: "0.5"
    }
    show rose1 = rose!(0.25, 0.5) @{
      parametricDomain: @{ min: ds(0), max: ds(2 * tau!()) },
      color: "rgb(20, 184, 166)",
      lineWidth: "4",
      lineOpacity: "0.75"
    }
    show rose2 = rose!(0.5, 1) @{
      parametricDomain: @{ min: ds(0), max: ds(2 * tau!()) },
      color: "rgb(16, 185, 129)",
      lineWidth: "4",
      lineOpacity: "0.875"
    }
    show rose3 = rose!(0.75, 1.5) @{
      parametricDomain: @{ min: ds(0), max: ds(2 * tau!()) },
      color: "rgb(34, 197, 94)",
      lineWidth: "4",
      lineOpacity: "1"
    }
  }
}

ns state {
  last = gridSize - 1;
  won = { player.row == last: { player.col == last: 1, 0 } };

  level = 1;
  hasWon = 0;
  levelStartFrame = 0;
  levelEndFrame = 0;

  fn checkWin() {
    { won == 1: (hasWon -> 1, levelEndFrame -> global.frame) }
  }
}

ns controller {
  fn xRotate(x, y, angle) {
    x * cos(angle) - y * sin(angle)
  }
  fn yRotate(x, y, angle) {
    x * sin(angle) + y * cos(angle)
  }
  
  buttonWidth = 0.5;
  buttonScale = 1.5;
  buttonHeight = 1.5;
  buttonDistance = 0.5;
  
  show verts = [
    (0, 0),
    (buttonWidth, 0.5),
    (buttonWidth, buttonHeight),
    (-1 * buttonWidth, buttonHeight),
    (-1 * buttonWidth, 0.5)
  ] @{ hidden: true }
  
  subst!(
rX,
      angle,
      xRotate(verts.x * buttonScale, verts.y * buttonScale + buttonDistance, angle)
    );
  subst!(
rY,
      angle,
      yRotate(verts.x * buttonScale, verts.y * buttonScale + buttonDistance, angle)
    );
  
  subst!(
button,
      angle,
      animOffset,
      polygon(iso!(rX!(angle), rY!(angle), animOffset))
    );
  
  topOffset = 2;
  bottomOffset = 2;
  rightOffset = 2;
  leftOffset = 2;
  
  upEnabled = not!(controls.checkUp());
  downEnabled = not!(controls.checkDown());
  rightEnabled = not!(controls.checkRight());
  leftEnabled = not!(controls.checkLeft());
  
  fn playAnim() {
    rightOffset -> anim!(easeInOutMix(2, 0, global.delta(0, 100)), 0, 100)
      , topOffset -> anim!(easeInOutMix(2, 0, global.delta(10, 100)), 10, 100)
      , leftOffset -> anim!(easeInOutMix(2, 0, global.delta(20, 100)), 20, 100)
      , bottomOffset -> anim!(easeInOutMix(2, 0, global.delta(30, 100)), 30, 100)
  }
  
  show button!(0, topOffset) @{
    clickableInfo: @{
      enabled: true,
      latex: ds({ controls.canMove() == 1: (player.targetRow -> player.targetRow - upEnabled , controls.anim!()) })
    },
    lineOpacity: ds((2 - topOffset) / 2 * upEnabled),
    fillOpacity: ds((2 - topOffset) / 2 * 0.4),
    lineWidth: "5",
    color: "red"
  }
  show button!(3.1416, bottomOffset) @{
    clickableInfo: @{
      enabled: true,
      latex: ds({ controls.canMove() == 1: (player.targetRow -> player.targetRow + downEnabled , controls.anim!()) })
    },
    lineOpacity: ds((2 - bottomOffset) / 2 * downEnabled),
    fillOpacity: ds((2 - bottomOffset) / 2 * 0.4),
    lineWidth: "5",
    color: "red"
  }
  show button!(4.7124, rightOffset) @{
    clickableInfo: @{
      enabled: true,
      latex: ds({ controls.canMove() == 1: (player.targetCol -> player.targetCol + rightEnabled
          , controls.anim!()
          , camera.startCamera()) })
    },
    lineOpacity: ds((2 - rightOffset) / 2 * rightEnabled),
    fillOpacity: ds((2 - rightOffset) / 2 * 0.4),
    lineWidth: "5",
    color: "red"
  }
  show button!(1.5708, leftOffset) @{
    clickableInfo: @{
      enabled: true,
      latex: ds({ controls.canMove() == 1: (player.targetCol -> player.targetCol - leftEnabled
          , controls.anim!()
          , camera.startCamera()) })
    },
    lineOpacity: ds((2 - leftOffset) / 2 * leftEnabled),
    fillOpacity: ds((2 - leftOffset) / 2 * 0.4),
    lineWidth: "5",
    color: "red"
  }
}

ns screen {
  screenOpacity = 1;
  
  fn doFade() {
    screenOpacity
      -> anim!(smoothstepMix(0, 1, global.delta(state.levelEndFrame, 60)), state.levelEndFrame, 60)
  }
  fn fadeIn() {
    screenOpacity -> anim!(smoothstepMix(1, 0, global.delta(state.levelStartFrame, 50)), state.levelStartFrame, 50)
  }
  
  show bg = polygon((-100, -100), (-100, 100), (100, 100), (100, -100)) @{ colorLatex: ds(rgb(3, 7, 18)), fillOpacity: ds(screenOpacity) }
}
