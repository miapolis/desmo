import script "./maze.mjs"

settings @{
    viewport: @{ xmin: -2, ymin: -2, xmax: 22, ymax: 22 },
    showGrid: false,
    showXAxis: false,
    showYAxis: false,
    userLockedViewport: true
  }

gridSize = 20;

subst!(param, x1, y1, x2, y2, ((1 - t) * x1 + t * x2, (1 - t) * y1 + t * y2));

ns grid {
  fn generateGrid() {
    [
      param!(0, 0, gridSize, 0),
      param!(gridSize, 0, gridSize, gridSize),
      param!(gridSize, gridSize, 0, gridSize),
      param!(0, gridSize, 0, 0)
    ]
  }
}

ns walls {
  subst!(idx, w, floor((w - 1) / 4));
  subst!(row, w, floor(idx!(w) / gridSize));
  subst!(col, w, mod(idx!(w), gridSize));
  
  subst!(
top,
      w,
      param!(col!(w), gridSize - row!(w), col!(w) + 1, gridSize - row!(w))
    );
  
  subst!(
right,
      w,
      param!(col!(w) + 1, gridSize - row!(w), col!(w) + 1, gridSize - row!(w) - 1)
    );
  
  subst!(
bottom,
      w,
      param!(col!(w), gridSize - row!(w) - 1, col!(w) + 1, gridSize - row!(w) - 1)
    );
  
  subst!(
left,
      w,
      param!(col!(w), gridSize - row!(w), col!(w), gridSize - row!(w) - 1)
    );
  
  data = maze!();
  len = gridSize * gridSize * 4;
  A = [{
      data[w] > 0: {
        mod(w, 4) == 0: top!(w),
        mod(w, 4) == 1: left!(w),
        mod(w, 4) == 2: bottom!(w),
        mod(w, 4) == 3: right!(w)
      }
    } for w=[1..len]];
}
