import script "./maze.mjs"

settings @{
    viewport: @{ xmin: -18, ymin: -20, xmax: 19, ymax: 40 },
    showGrid: false,
    showXAxis: false,
    showYAxis: false,
    userLockedViewport: true
  }

gridSize = 10;
proj = 3.5;

cacheCos = cos(proj / 6);
cacheSin = sin(proj / 6);

ns camera {
  x = 0;
  y = 0;
}

"ticker @{ handlerLatex: ds(camera.x -> camera.x + 0.5), playing: true, open: true }"

"subst!(param, x1, y1, x2, y2, ((1 - t) * x1 + t * x2, (1 - t) * y1 + t * y2));"
subst!(param, x1, y1, x2, y2, (
      cacheCos * ((1 - t) * x1 + t * x2)
      - cacheCos * ((1 - t) * y1 + t * y2)
      + camera.x,
      cacheSin * ((1 - t) * x1 + t * x2)
      + cacheSin * ((1 - t) * y1 + t * y2)
      + camera.y
      - 1
));

ns grid {
  fn generateGrid() {
    [
      param!(0, 0, gridSize, 0),
      param!(gridSize, 0, gridSize, gridSize),
      param!(gridSize, gridSize, 0, gridSize),
      param!(0, gridSize, 0, 0)
    ]
  }
}

ns walls {
  subst!(
drawRow,
      rowIndex,
      startCol,
      length,
      param!(startCol, gridSize - rowIndex, startCol + length, gridSize - rowIndex)
    );
  subst!(
drawCol,
      colIndex,
      startRow,
      length,
      param!(colIndex, gridSize - startRow, colIndex, gridSize - startRow - length)
    );
  
  "[rowIndex, startCol, length, rowIndex, startCol, length, ...]"
  rows = consolidateRows!();
  cols = consolidateCols!();
  
  len = gridSize * gridSize * 4;
  
  show R = [drawRow!(rows[(i * 3 - 2)], rows[(i * 3 - 1)], rows[(i * 3)]) for
    i=[1..length!(rows)]
  ] @{ color: "red" }
  
  show C = [drawCol!(cols[(i * 3 - 2)], cols[(i * 3 - 1)], cols[(i * 3)]) for
    i=[1..length!(cols)]
  ] @{ color: "green" }
}
